// <auto-generated />
using System;
using Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Migrations
{
    [DbContext(typeof(SurveysContext))]
    partial class SurveysContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeesMultipleAnswers", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("MultipleAnswerId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "MultipleAnswerId");

                    b.HasIndex("MultipleAnswerId");

                    b.ToTable("EmployeesMultipleAnswers");
                });

            modelBuilder.Entity("EmployeesSingleAnswers", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SingleAnswerId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "SingleAnswerId");

                    b.HasIndex("SingleAnswerId");

                    b.ToTable("EmployeesSingleAnswers");
                });

            modelBuilder.Entity("EmployeesSurveys", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "SurveyId");

                    b.HasIndex("SurveyId");

                    b.ToTable("EmployeesSurveys");
                });

            modelBuilder.Entity("Library.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1989, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "petr1989@yandex.ru",
                            Login = "login",
                            Name = "Петр",
                            Password = "password",
                            Surname = "Большаков"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1973, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "semen3401@hotmail.com",
                            Login = "semen3401",
                            Name = "Семен",
                            Password = "8e71c26d7",
                            Patronymic = "Никитович",
                            Surname = "Аксенчук"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1984, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "milan1984@gmail.com",
                            Login = "milan1984",
                            Name = "Милан",
                            Password = "7822cdf91",
                            Surname = "Яимов"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1989, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tamara18031986@gmail.com",
                            Login = "tamara18031989",
                            Name = "Тамара",
                            Password = "3f3af347b",
                            Patronymic = "Алексеевна",
                            Surname = "Куксилова"
                        });
                });

            modelBuilder.Entity("Library.EmployeeFreeAnswer", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FreeAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("EmployeeId", "FreeAnswerId");

                    b.HasIndex("FreeAnswerId");

                    b.ToTable("EmployeesFreeAnswers");
                });

            modelBuilder.Entity("Library.FreeAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("FreeAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 27
                        });
                });

            modelBuilder.Entity("Library.MultipleAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("MultipleAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 13,
                            Text = "Повышение заработной платы"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 13,
                            Text = "Рост количества привилегий и льгот"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 13,
                            Text = "Рост уважения среди колле"
                        },
                        new
                        {
                            Id = 4,
                            QuestionId = 13,
                            Text = "Рост степени ответственности за принимаемые решения"
                        },
                        new
                        {
                            Id = 5,
                            QuestionId = 13,
                            Text = "Большую свободу действий"
                        },
                        new
                        {
                            Id = 6,
                            QuestionId = 13,
                            Text = "Рост нагрузки, напряженности"
                        },
                        new
                        {
                            Id = 7,
                            QuestionId = 13,
                            Text = "Увеличение стрессовости"
                        },
                        new
                        {
                            Id = 8,
                            QuestionId = 13,
                            Text = "Другое"
                        },
                        new
                        {
                            Id = 9,
                            QuestionId = 15,
                            Text = "Личные обстоятельства"
                        },
                        new
                        {
                            Id = 10,
                            QuestionId = 15,
                            Text = "Отсутствие возможности повысить квалификацию, получить образование"
                        },
                        new
                        {
                            Id = 11,
                            QuestionId = 15,
                            Text = "Большое количество конкурентов на должность"
                        },
                        new
                        {
                            Id = 12,
                            QuestionId = 15,
                            Text = "Недоброжелательное отношение руководства"
                        },
                        new
                        {
                            Id = 13,
                            QuestionId = 15,
                            Text = "Недоброжелательное отношение коллег"
                        },
                        new
                        {
                            Id = 14,
                            QuestionId = 15,
                            Text = "Другое"
                        });
                });

            modelBuilder.Entity("Library.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 1,
                            Text = "Знаете ли вы, чего ожидает от вас руководство?"
                        },
                        new
                        {
                            Id = 2,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 1,
                            Text = "Есть ли у вас необходимые инструменты и материалы для качественного выполнения своей работы?"
                        },
                        new
                        {
                            Id = 3,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 1,
                            Text = "Есть ли у вас возможность ежедневно делать на работе то, что вы делаете лучше всего?"
                        },
                        new
                        {
                            Id = 4,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 1,
                            Text = "Получали ли вы за последние семь дней одобрение или похвалу за хорошо выполненную работу?"
                        },
                        new
                        {
                            Id = 5,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 1,
                            Text = "Принимается ли во внимание ваша точка зрения?"
                        },
                        new
                        {
                            Id = 6,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 1,
                            Text = "Считают ли коллеги своим долгом качественное выполнение работы?"
                        },
                        new
                        {
                            Id = 7,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 1,
                            Text = "За последние полгода кто-нибудь на работе говорил с вами о ваших профессиональных успехах и достижениях?"
                        },
                        new
                        {
                            Id = 8,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 1,
                            Text = "За последний год были ли у вас на работе возможности для приобретения новых знаний и профессионального роста?"
                        },
                        new
                        {
                            Id = 9,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 2,
                            Text = "Вы работаете в Компании: "
                        },
                        new
                        {
                            Id = 10,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 2,
                            Text = "Насколько Вы удовлетворены работой в Компании в целом? "
                        },
                        new
                        {
                            Id = 11,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 2,
                            Text = "Насколько важен для Вас карьерный рост? "
                        },
                        new
                        {
                            Id = 12,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 2,
                            Text = "Ожидаете ли Вы повышения? Если да, то как скоро? "
                        },
                        new
                        {
                            Id = 13,
                            IsRequired = true,
                            QuestionTypeId = 2,
                            SurveyId = 2,
                            Text = "Каких изменений Вы ожидаете вместе с повышением? "
                        },
                        new
                        {
                            Id = 14,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 2,
                            Text = "Существуют ли какие-либо препятствия для Вашего карьерного роста?"
                        },
                        new
                        {
                            Id = 15,
                            IsRequired = true,
                            QuestionTypeId = 2,
                            SurveyId = 2,
                            Text = "Уточните: "
                        },
                        new
                        {
                            Id = 16,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Как часто Ваш руководитель доступен для подчинённых?"
                        },
                        new
                        {
                            Id = 17,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Как часто Ваш руководитель даёт оценку Вашей работе?"
                        },
                        new
                        {
                            Id = 18,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Насколько эффективными являются тренинги Вашего руководителя?"
                        },
                        new
                        {
                            Id = 19,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Как часто Ваш коллега опаздывает на работу?"
                        },
                        new
                        {
                            Id = 20,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Насколько трудоспособен Ваш коллега?"
                        },
                        new
                        {
                            Id = 21,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Как Вы оцениваете работу Вашего коллеги с клиентами?"
                        },
                        new
                        {
                            Id = 22,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Насколько эффективен Ваш подчинённый в работе?"
                        },
                        new
                        {
                            Id = 23,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Насколько коммуникабелен Ваш подчинённый со своими коллегами?"
                        },
                        new
                        {
                            Id = 24,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Как часто Ваш подчинённый сдаёт работу в 'последнюю минуту'?"
                        },
                        new
                        {
                            Id = 25,
                            IsRequired = false,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Считаете ли вы что рабочая атмосфера в отделе 'токсичная'?"
                        },
                        new
                        {
                            Id = 26,
                            IsRequired = true,
                            QuestionTypeId = 1,
                            SurveyId = 3,
                            Text = "Оцените эффективность работы Вашего отдела?"
                        },
                        new
                        {
                            Id = 27,
                            IsRequired = false,
                            QuestionTypeId = 3,
                            SurveyId = 3,
                            Text = "Вы можете внести предложения по улучшению работы Вашего отдела:"
                        });
                });

            modelBuilder.Entity("Library.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Single"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Multiple"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Free"
                        });
                });

            modelBuilder.Entity("Library.SingleAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SingleAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 1,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 2,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 4,
                            QuestionId = 2,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 5,
                            QuestionId = 3,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 6,
                            QuestionId = 3,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 7,
                            QuestionId = 4,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 8,
                            QuestionId = 4,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 9,
                            QuestionId = 5,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 10,
                            QuestionId = 5,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 11,
                            QuestionId = 6,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 12,
                            QuestionId = 6,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 13,
                            QuestionId = 7,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 14,
                            QuestionId = 7,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 15,
                            QuestionId = 8,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 16,
                            QuestionId = 8,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 17,
                            QuestionId = 9,
                            Text = "Менее 6 месяцев"
                        },
                        new
                        {
                            Id = 18,
                            QuestionId = 9,
                            Text = "6-12 месяцев"
                        },
                        new
                        {
                            Id = 19,
                            QuestionId = 9,
                            Text = "1-3 года"
                        },
                        new
                        {
                            Id = 20,
                            QuestionId = 9,
                            Text = "3-5 лет"
                        },
                        new
                        {
                            Id = 21,
                            QuestionId = 9,
                            Text = "Более 5 лет"
                        },
                        new
                        {
                            Id = 22,
                            QuestionId = 10,
                            Text = "Полностью удовлетворен(а)"
                        },
                        new
                        {
                            Id = 23,
                            QuestionId = 10,
                            Text = "Скорее удовлетворен(а)"
                        },
                        new
                        {
                            Id = 24,
                            QuestionId = 10,
                            Text = "Скорее не удовлетворен(а)"
                        },
                        new
                        {
                            Id = 25,
                            QuestionId = 10,
                            Text = "Скорее не удовлетворен(а)"
                        },
                        new
                        {
                            Id = 26,
                            QuestionId = 11,
                            Text = "Крайне важен"
                        },
                        new
                        {
                            Id = 27,
                            QuestionId = 11,
                            Text = "Скорее важен"
                        },
                        new
                        {
                            Id = 28,
                            QuestionId = 11,
                            Text = "Скорее не важен"
                        },
                        new
                        {
                            Id = 29,
                            QuestionId = 11,
                            Text = "Совсем не важен"
                        },
                        new
                        {
                            Id = 30,
                            QuestionId = 12,
                            Text = "Да, в течение ближайших месяцев"
                        },
                        new
                        {
                            Id = 31,
                            QuestionId = 12,
                            Text = "Да, в течение года"
                        },
                        new
                        {
                            Id = 32,
                            QuestionId = 12,
                            Text = "Да, в течение ближайших 3-5 лет"
                        },
                        new
                        {
                            Id = 33,
                            QuestionId = 12,
                            Text = "Да, не раньше, чем через пять лет"
                        },
                        new
                        {
                            Id = 34,
                            QuestionId = 12,
                            Text = "Нет, не ожидаю повышения"
                        },
                        new
                        {
                            Id = 35,
                            QuestionId = 14,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 36,
                            QuestionId = 14,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 37,
                            QuestionId = 16,
                            Text = "Всегда"
                        },
                        new
                        {
                            Id = 38,
                            QuestionId = 16,
                            Text = "Часто"
                        },
                        new
                        {
                            Id = 39,
                            QuestionId = 16,
                            Text = "Редко"
                        },
                        new
                        {
                            Id = 40,
                            QuestionId = 16,
                            Text = "Никогда"
                        },
                        new
                        {
                            Id = 41,
                            QuestionId = 17,
                            Text = "Каждый раз"
                        },
                        new
                        {
                            Id = 42,
                            QuestionId = 17,
                            Text = "Часто"
                        },
                        new
                        {
                            Id = 43,
                            QuestionId = 17,
                            Text = "Редко"
                        },
                        new
                        {
                            Id = 44,
                            QuestionId = 17,
                            Text = "Иногда"
                        },
                        new
                        {
                            Id = 45,
                            QuestionId = 18,
                            Text = "Очень эффективные"
                        },
                        new
                        {
                            Id = 46,
                            QuestionId = 18,
                            Text = "Эффективные"
                        },
                        new
                        {
                            Id = 47,
                            QuestionId = 18,
                            Text = "Малоэффективные"
                        },
                        new
                        {
                            Id = 48,
                            QuestionId = 18,
                            Text = "Не эффективные"
                        },
                        new
                        {
                            Id = 49,
                            QuestionId = 19,
                            Text = "Всегда"
                        },
                        new
                        {
                            Id = 50,
                            QuestionId = 19,
                            Text = "Часто"
                        },
                        new
                        {
                            Id = 51,
                            QuestionId = 19,
                            Text = "Иногда"
                        },
                        new
                        {
                            Id = 52,
                            QuestionId = 19,
                            Text = "Никогда"
                        },
                        new
                        {
                            Id = 53,
                            QuestionId = 20,
                            Text = "Очень трудоспособен"
                        },
                        new
                        {
                            Id = 54,
                            QuestionId = 20,
                            Text = "Достаточно трудоспособен"
                        },
                        new
                        {
                            Id = 55,
                            QuestionId = 20,
                            Text = "Удовлетворительно"
                        },
                        new
                        {
                            Id = 56,
                            QuestionId = 20,
                            Text = "Не удовлетворительно"
                        },
                        new
                        {
                            Id = 57,
                            QuestionId = 21,
                            Text = "Отлично"
                        },
                        new
                        {
                            Id = 58,
                            QuestionId = 21,
                            Text = "Очень хорошо"
                        },
                        new
                        {
                            Id = 59,
                            QuestionId = 21,
                            Text = "Хорошо"
                        },
                        new
                        {
                            Id = 60,
                            QuestionId = 21,
                            Text = "Удовлетворительно"
                        },
                        new
                        {
                            Id = 61,
                            QuestionId = 21,
                            Text = "Неудовлетворительно"
                        },
                        new
                        {
                            Id = 62,
                            QuestionId = 22,
                            Text = "Очень эффективные"
                        },
                        new
                        {
                            Id = 63,
                            QuestionId = 22,
                            Text = "Эффективные"
                        },
                        new
                        {
                            Id = 64,
                            QuestionId = 22,
                            Text = "Малоэффективные"
                        },
                        new
                        {
                            Id = 65,
                            QuestionId = 22,
                            Text = "Не эффективные"
                        },
                        new
                        {
                            Id = 66,
                            QuestionId = 23,
                            Text = "Очень коммуникабелен"
                        },
                        new
                        {
                            Id = 67,
                            QuestionId = 23,
                            Text = "В меру коммуникабелен"
                        },
                        new
                        {
                            Id = 68,
                            QuestionId = 23,
                            Text = "Не достаточно коммуникабелен"
                        },
                        new
                        {
                            Id = 69,
                            QuestionId = 23,
                            Text = "Скрытный"
                        },
                        new
                        {
                            Id = 70,
                            QuestionId = 24,
                            Text = "Всегда"
                        },
                        new
                        {
                            Id = 71,
                            QuestionId = 24,
                            Text = "Часто"
                        },
                        new
                        {
                            Id = 72,
                            QuestionId = 24,
                            Text = "Иногда"
                        },
                        new
                        {
                            Id = 73,
                            QuestionId = 24,
                            Text = "Никогда"
                        },
                        new
                        {
                            Id = 74,
                            QuestionId = 25,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 75,
                            QuestionId = 25,
                            Text = "Нет"
                        },
                        new
                        {
                            Id = 76,
                            QuestionId = 26,
                            Text = "5"
                        },
                        new
                        {
                            Id = 77,
                            QuestionId = 26,
                            Text = "4"
                        },
                        new
                        {
                            Id = 78,
                            QuestionId = 26,
                            Text = "3"
                        },
                        new
                        {
                            Id = 79,
                            QuestionId = 26,
                            Text = "2"
                        },
                        new
                        {
                            Id = 80,
                            QuestionId = 26,
                            Text = "1"
                        });
                });

            modelBuilder.Entity("Library.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Тест на вовлеченность персонала (Gallup Q12)"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Карьерные ожидания сотрудников"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Круговая оценка работы персонала (Метод «360 градусов»)"
                        });
                });

            modelBuilder.Entity("EmployeesMultipleAnswers", b =>
                {
                    b.HasOne("Library.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.MultipleAnswer", null)
                        .WithMany()
                        .HasForeignKey("MultipleAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeesSingleAnswers", b =>
                {
                    b.HasOne("Library.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.SingleAnswer", null)
                        .WithMany()
                        .HasForeignKey("SingleAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeesSurveys", b =>
                {
                    b.HasOne("Library.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.EmployeeFreeAnswer", b =>
                {
                    b.HasOne("Library.Employee", "Employee")
                        .WithMany("EmployeeFreeAnswers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.FreeAnswer", "FreeAnswer")
                        .WithMany("EmployeeFreeAnswers")
                        .HasForeignKey("FreeAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("FreeAnswer");
                });

            modelBuilder.Entity("Library.FreeAnswer", b =>
                {
                    b.HasOne("Library.Question", "Question")
                        .WithMany("FreeAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Library.MultipleAnswer", b =>
                {
                    b.HasOne("Library.Question", "Question")
                        .WithMany("MultipleAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Library.Question", b =>
                {
                    b.HasOne("Library.QuestionType", "Type")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Library.SingleAnswer", b =>
                {
                    b.HasOne("Library.Question", "Question")
                        .WithMany("SingleAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Library.Employee", b =>
                {
                    b.Navigation("EmployeeFreeAnswers");
                });

            modelBuilder.Entity("Library.FreeAnswer", b =>
                {
                    b.Navigation("EmployeeFreeAnswers");
                });

            modelBuilder.Entity("Library.Question", b =>
                {
                    b.Navigation("FreeAnswers");

                    b.Navigation("MultipleAnswers");

                    b.Navigation("SingleAnswers");
                });

            modelBuilder.Entity("Library.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Library.Survey", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
